Instrukcje kontroli przepływu: for, if, else, switch oraz defer
Naucz się jak kontrolować przepływ twego kodu używając warunków (conditionals), pętli (loops), switch oraz defers. 

Autorzy Go
https://golang.org

* For

Go posiada tylko jedną konstrukcję pętli, jest nią pętla `for`.

Podstawowa pętla `for` posiada trzy komponenty oddzielone średnikiem:

- inicjalizacja: odbywa się raz, tuż przez rozpoczęciem pętli
- wyrażenie warunkowe: sprawdzone przed każdym rozpoczęciem pętli
- inkrementacja: wykonana po każdym przejściu przez pętlę.

Bardzo często, inicjalizacja to krótkie określenie zmiennej lub zmiennych, i owe
zmienne będą widoczne tylko w bloku danej pętli `for`.

Pętla zakończy iterację gdy tylko wartość boolean zostanie określona jako `false`.

*Uwaga:* W odróżnieniu od innych języków takich jak C, Java, lub JavaScript nie używamy nawiasów 
otaczających trzy komponenty instrukcji `for` jednak `{`}` są zawsze wymagane.

.play flowcontrol/for.go

* Pętla "for" ciąg dalszy

Inicjalizacja oraz inkrementacja są opcjonalne.

.play flowcontrol/for-continued.go

* "for" jest w Go jak "while"

Używane w C `while` jest tym samym co `for` w Go.

.play flowcontrol/for-is-gos-while.go

* Nieskończoność

Jeśli ominiesz wyrażenie warunkowe pętli, stworzysz pętle nieskończoną.

.play flowcontrol/forever.go

* If

Instrukcja `if` w Go jest tak jak pętla `for`; wyrażenia nie muszą otaczać nawiasy `(`)`
jednak `{`}` są wymagane.

.play flowcontrol/if.go

* If z krótką instrukcją

Tak jak `for`, instrukcja `if` może rozpocząć się krótkim wyrażeniem tuż przed warunkiem.

Zmienne zadeklarowane poprzez wyrażenie są zawarte w bloku tylko do końca `if`.

(Spróbuj użyć `v` w ostatnim wyrażeniu `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If oraz else

Zmienne zadeklarowane w środku krótkiej instrukcji `if` są również dostępne w środku
każdego bloku `else`.

(Oba wywołania `pow` zwracają rezultat zanim wywołanie do `fmt.Println` w `main` się zaczyna.)

.play flowcontrol/if-and-else.go

* Ćwiczenie: Pętle oraz Funkcje

Jako sposób przećwiczenia funkcji oraz pętli, zaimplementujmy funkcję pierwiastka kwadratowego: posiadając liczbę x, chcemy znaleźć liczbę dla której z² jest najbliższy liczbie x.

Komputery z reguły obliczają pierwiastek kwadratowy x używając pętli.
Zaczynając od jakieś przykładowej liczby `z`, możemy dopasować `z` na podstawie tego jak zbliżone z² jest do x,
ulepszając nasz rezultat:

	z -= (z*z - x) / (2*z)

Poprzez dostosowywanie `z` nasz rezultat powinien wyglądać coraz lepiej,
aż do momentu gdy otrzymamy odpowiedź najbardziej zbliżoną do pierwiastka kwadratowego.

Zaimplementuj to samo używając funkcji `func`Sqrt`.
Przyzwoitym początkiem dla `z` będzie 1.
By zacząć, powtórz kalkulację 10 razy i wydrukuj każde `z`.
Zobacz jak blisko odpowiedzi jestes dla różnych wartości x (1, 2, 3, ...) oraz
jak szybko rezultat się poprawia.

Wskazówka: By zadeklarować wartość zmiennoprzecinkową (floating point),
skorzystaj z syntaxu zmiennoprzecinkowego lub użyj konwersji:

	z := 1.0
	z := float64(1)

Następnie, zmień warunek pętli tak, by zatrzymała się gdy wartość
przestanie się zmieniać (lub będzie się zmieniać tylko o bardzo niską wartość).
Zaobserwuj czy stanie się to po więcej lub mniej niż 10 powtórzeniach.
Spróbuj również innych wartości podstawowych dla z, x, lub nawet x/2!
Jak blisko twoja funkcja jest funkcji [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] ze standardowej biblioteki?

(*Uwaga:* Jeśli jesteś zainteresowany detalami algorytmu, wyżej wymienione z² − x 
oznacza jak daleko wartość z² jest od wartości którą powinno być (x), podzielenie 2z jest pochodną 
z², by skalować sposób w jaki dostosowujemy z, w zależności od tego jak szybko zmienia się wartość z²)

To podejście nazywane jest [[https://en.wikipedia.org/wiki/Newton%27s_method][metodą Newtona]].
Działa ono bardzo dobrze w wielu funkcjach, jednak wyjątkowo dobrze dla pierwiastka kwadratowego.

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Instrukcja warunkowa `switch` jest krótszym sposobem na zapisanie łańcucha instrukcji `if`-`else`.
Zostanie wykonany kod którego wynik, zgadza się z warunkiem w instrukcji `switch`.

Switch w go jest tym samym co w C, C++, Java, JavaScript, oraz PHP,
z tą różnicą że w Go, puszczany jest tylko przypadek(`case`) który spełnia warunki, a nie 
wszystkie pozostałe przypadki.
W efekcie, instrukcja `break` ktora jest wymagana na końcu każdego przypadku w innych językach, 
w Go dostarczana jest automatycznie.
Kolejną ważną różnicą jest to, że przypadki w Go nie muszą być stałymi, a wartości przekazywane,
nie muszą być integerami.

.play flowcontrol/switch.go

* Ewaluacja Switch

Przypadki switch są ewaluowane od góry do dołu, zatrzymując się gdy przypadek pokrywa się z warunkiem.

(Na przykład,

	switch i {
	case 0:
	case f():
	}

`f` nie zostanie wykonany jeżeli `i==0`.)

#appengine: *Uwaga:* Czas w playgroundzie Go zawsze zaczyna się od
#appengine: 2009-11-10 23:00:00 UTC, wartość której ważność pozastawimy do ustalenia
#appengine: dla czytelnika.

.play flowcontrol/switch-evaluation-order.go

* Switch bezwarunkowy

Switch bezwarunkowy jest tym samym co `switch`true`.

Ten konstrukt może być bardzo przejrzystym sposobem na zapisanie długiego łańcucha if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer - czyli opóźnione wykonanie

Instrukcja defer opóźnia wykonanie funkcji dopóki otaczająca funkcja nie zwróci wyniku.

Wywołane argumenty w defer są ewaluowane natychmiastowo, jednak sama funkcja
jest wywołana dopiero gdy otaczająca ją funkcja zwraca wynik.

.play flowcontrol/defer.go

* Stertowanie defer

Wywołane funkcje deferred są pchnięte do stosu. Gdy funckja zwraca wartość, jej 
wywołania funkcji deferred są egzekwowane od ostatniej która została wepchnięta do stosu. 

By nauczyć się więcej o wyrażeniach defer, przeczytaj ten 
[[https://blog.golang.org/defer-panic-and-recover][blog post]].

.play flowcontrol/defer-multi.go

* Gratulujemy!

Ukończyłeś tą lekcję!

Możesz wrócić do listy [[/list][modułów]] by dowiedzieć się czego nauczyć się następnie, lub kontynuować do [[javascript:click('.next-page')][następnej lekcji]]
